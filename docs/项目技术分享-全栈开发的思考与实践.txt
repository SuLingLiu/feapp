题目：基于(Vue+Webpack+Express+MongoDB+ES6)全栈开发的思考与实践
大纲：
	*技术栈介绍
	*项目目录介绍
	*项目规范介绍
	*权限设计
	*日志设计
	*本地调试策略
	*自动化运维
	*踩坑&优化&其它
	*Q&A

简介：
	*此次分享更多是思路交流
	*大纲内容适用于任何技术栈组合的全栈开发
目的：
	*让大家对全栈开发有个基本认识
	*让大家建立尝试新技术的信心
	*让大家明白应用场景符合，团队气质符合，可以去尝试新技术

1、技术栈介绍
	参考：(1)项目技术栈.png
2、项目目录介绍
	参考：项目目录规划.txt
3、项目规范介绍
	参考：项目编码规范.txt
4、权限设计
	参考：(1)prd环境登录鉴权流程.png
		  (2)dev环境登录鉴权流程.png
5、日志设计
	dev环境：
		(1)输出所有级别日志
		(2)输出到控制台
	prd环境：
		(1)仅输出Error级别日志和启动日志
		(2)输出到文件中(logs目录下)，日志按日期分割
		(3)对日志目录进行服务代理，查看日志方便
6、本地调试策略
	目的：线上Bug定位及修复
	考虑：直接连接生产库，会污染生产库数据
	前提：实现生产库数据隔离
	步骤：(1)将生产库数据恢复到测试库
		  (2)本地调试时根据环境变量不同调用测试库数据
			npm run test-server
7、自动化运维
	(1)项目自动发布
		*登录服务器
		*pm2 stop feapp
		*svn update
		*cnpm install
		*npm run build
		*pm2 start feapp
	(2)清洗测试库数据
		*备份生产库数据
		*将生产库数据恢复到测试库
8、踩坑&优化&其它
	(1)注册Mongoose模型顺序问题
		前期配置：
			fs.readdirSync(models)
			  .filter(file => ~file.search(/^[^\.].*\.js$/))
			  .forEach(file => require(path.join(models, file)));
		优化为手工依赖配置(根据依赖顺序配置，防止动态读取文件注册顺序不可控，编译失败问题)：
			require('./mongodb/models/sessionModel');
			require('./mongodb/models/taskModel');
			require('./mongodb/models/userTaskMapModel');
	(2)表单提交时，参数传递的合理性
	(3)MongoDB的缺点：不支持事务回滚
	(4)Promise.all的使用场景
	(5)gfe build使用Promise.all问题及解决方案
		问题：使用Promise.all，当打包channel_web时，系统卡死
		解决方案：使用gfe-build.sh脚本来执行gfe build
	(6)执行gfe-build.sh注意事项
		I:上传到服务器上之后需要执行chmod 777 gfe-build.sh
		II:本地编辑好的脚本由于编码问题会报错，需要在linux上使用vi命令编辑，然后将脚本copy出来后再提交SVN
9、生产库备份
	feapp-mongodb-bak/
	├── feapp-prd-bak-list--------生产库备份列表
	├── feapp-prd-bak.sh----------备份生产库，规则：周一到周五每天5:00备份一次，并删除10天以前的备份数据
	├── feapp-test-restore.sh-----将生产库数据恢复到测试库，用于清洗测试库数据
	└── temp----------------------临时目录

	定时任务的node依赖：node-schedule
10、Q&A
	